{"remainingRequest":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/src/views/Home.vue","mtime":1638274974005},{"path":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eudis/Dev/GSMA/b4ll/b4ll-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}